<html>
<!-- Include head, pass meta object through -->
<%- include('partials/head', { meta: {
title: "Play",
description: "Project a vector, earn points, and beat others!"
} }) %>
<body class="bg-gray-100">
<div class="absolute inset-0 bg-[url(/svg/grid.svg)] bg-center w-full h-full -z-10"></div>
<div class="relative z-10">
    <div class="container mx-auto min-h-screen flex flex-col items-center justify-center">
        <div class="p-6 rounded-lg shadow-md bg-white max-w-4xl mt-6 mb-6">
            <h1 class="text-4xl font-bold mb-4">Play <a href="/about#update-jan-19"><span
                            class="text-gray-500 text-lg hover:underline">LAMP Jan 19 Version</span></a></h1>
            <p class="mb-4">
                Your goal is to project the <span class="font-bold text-red-500">red vector</span> onto the <span
                        class="font-bold text-blue-500">blue vector</span>. Drag the green vector's head (arrow) to
                where you think the projection will be. If you're on a touch screen device (I do rotating your phone sideways), click on the canvas to place your vector. The closer you are, the more points you get!
            </p>
            <p class="mb-4">
                A score of >90 is pretty good, a score of >95 is excellent, and a score of >98 means you're probably
                hacking.
            </p>
            <p class="mb-4">
                Once you submit your score, the interface will lock, and you can't change your answer. The correct
                vector will be displayed in purple, so you can compare your answer to the correct answer.
            </p>
            <p>
                <a class="text-blue-500 hover:underline" href="/png/tutorial.png">This apparently hasn't been clear
                    enough so here is a tutorial</a>
            </p>
            <br>
            <canvas id="main" class="m-auto align-center justify-center" width="500px" height="500px"></canvas>
            <div class="flex justify-center mt-4">
                <button id="new-challenge"
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">
                    New Challenge
                </button>
                <button id="mobile-mode"
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg ml-4">
                    I'm using a touch screen
                </button>
                <button id="submit"
                        class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg ml-4">
                    Submit
                </button>
            </div>
            <p class="text-red-500 text-sm mb-4" id="error"></p>
            <div class="flex justify-center mt-4">
                <table class="table-auto border-collapse border border-gray-400">
                    <tr class="border border-gray-400">
                        <th class="border border-gray-400 px-4 py-2">Type</th>
                        <th class="border border-gray-400 px-4 py-2">Score</th>
                    </tr>
                    <tr class="border border-gray-400">
                        <td class="border border-gray-400 px-4 py-2">Total score</td>
                        <td class="border border-gray-400 px-4 py-2" id="score"></td>
                    </tr>
                    <tr class="border border-gray-400">
                        <td class="border border-gray-400 px-4 py-2">X score</td>
                        <td class="border border-gray-400 px-4 py-2" id="score-x"></td>
                    </tr>
                    <tr class="border border-gray-400">
                        <td class="border border-gray-400 px-4 py-2">Y score</td>
                        <td class="border border-gray-400 px-4 py-2" id="score-y"></td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
	// Since the vector matching and playing functions will take up lots of space, we're putting them in their own javascript file (here) instead of in the template.

	let currentGame = null;
	let ctx = document.getElementById("main").getContext("2d");


	function clearCanvas() {
		const canvas = document.getElementById("main");
		const ctx = canvas.getContext("2d");
		ctx.clearRect(0, 0, canvas.width, canvas.height);
	}

	async function getNewChallenge() {
		// Fetch from server using fetch API
		let res = await fetch('/api/challenge', {
			method: 'GET',
		});
		let resJson = await res.json();
		if (resJson.status !== 200) {
			// If the status is not 200, then there was an error
			// Display the error message
			document.getElementById('error').innerText = resJson.message;
		} else {
			if (currentGame !== null) {
				currentGame.stop();
			}
			currentGame = new Game(resJson.data, ctx);
			// Clear the error message
			document.getElementById('error').innerText = '';
		}
	}

	function submitAnswer(answer) {
		// Fetch from server using fetch API
		return fetch('/api/answer', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				answer: answer
			})
		}).then(function (response) {
			return response.json();
		}).then(function (data) {
			// Set the current starting vector and projection vector
			currentStartingVector = data.startingVector;
			currentProjectionVector = data.projectionVector;
		});
	}

	class CanvasVector {
		constructor(ctx, x1, y1, x2, y2, color) {
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
			this.color = color;
			this.ctx = ctx;
		}

		draw() {
			this.ctx.lineCap = 'round';
			const headlen = 10; // length of head in pixels
			const dx = this.x2 - this.x1;
			const dy = this.y2 - this.y1;
			const angle = Math.atan2(dy, dx);
			this.ctx.beginPath();
			this.ctx.moveTo(this.x1, this.y1);
			this.ctx.lineTo(this.x2, this.y2);
			this.ctx.lineTo(this.x2 - headlen * Math.cos(angle - Math.PI / 6), this.y2 - headlen * Math.sin(angle - Math.PI / 6));
			this.ctx.moveTo(this.x2, this.y2);
			this.ctx.lineTo(this.x2 - headlen * Math.cos(angle + Math.PI / 6), this.y2 - headlen * Math.sin(angle + Math.PI / 6));
			this.ctx.strokeStyle = this.color;
			this.ctx.stroke();
			this.ctx.closePath();
		}

		// Returns the length of the vector
		getLength() {
			return Math.sqrt(Math.pow(this.x2 - this.x1, 2) + Math.pow(this.y2 - this.y1, 2));
		}

		// Returns the angle of the vector in radians
		getAngle() {
			return Math.atan2(this.y2 - this.y1, this.x2 - this.x1);
		}
	}

	class DraggableCanvasVector extends CanvasVector {
		constructor(ctx, x1, y1, x2, y2, color) {
			super(ctx, x1, y1, x2, y2, color);
			this.dragging = false;
			this.dragOffsetX = 0;
			this.dragOffsetY = 0;
			this.drawArc = 0;
			this.hovering = false;
		}

		draw() {
			super.draw();
			if (this.hovering === true) {
				if (this.drawArc < 10) {
					this.drawArc += 0.5;
				}
			} else {
				if (this.drawArc > 0) {
					this.drawArc -= 0.5;
				}
			}
			if (this.drawArc > 0) {
				this.ctx.beginPath();
				this.ctx.arc(this.x2, this.y2, this.drawArc, 0, 2 * Math.PI);
				this.ctx.strokeStyle = this.color;
				this.ctx.stroke();
				this.ctx.closePath();
			}
		}

		// Returns the length of the vector
		getLength() {
			return Math.sqrt(Math.pow(this.x2 - this.x1, 2) + Math.pow(this.y2 - this.y1, 2));
		}

		// Returns the angle of the vector in radians
		getAngle() {
			return Math.atan2(this.y2 - this.y1, this.x2 - this.x1);
		}

		// Adds event listeners to the canvas to make the vector draggable
		addEventListeners(canvas) {
			canvas.addEventListener('mousedown', (e) => {
				// Check if the mouse is within 8 pixels of the tail of the vector
				if (Math.sqrt(Math.pow(e.offsetX - this.x2, 2) + Math.pow(e.offsetY - this.y2, 2)) < 8) {
					this.dragging = true;
					this.dragOffsetX = e.offsetX - this.x2;
					this.dragOffsetY = e.offsetY - this.y2;
				}
			});

			canvas.addEventListener('mousemove', (e) => {
				if (this.dragging) {
					this.x2 = e.offsetX - this.dragOffsetX;
					this.y2 = e.offsetY - this.dragOffsetY;
				}
				// Check if within 8 pixels of the head of the vector
				if (Math.sqrt(Math.pow(e.offsetX - this.x2, 2) + Math.pow(e.offsetY - this.y2, 2)) < 8) {
					this.hovering = true;
				} else {
					this.hovering = false;
				}
			});

			canvas.addEventListener('mouseup', (e) => {
				this.dragging = false;
			});
		}
	}

	// Get the canvas element
	const canvas = document.getElementById('main');

	// Get the new challenge button
	const newChallengeButton = document.getElementById('new-challenge');

	// Get the submit button
	const submitButton = document.getElementById('submit');

	let mobile = false;
	if (window.innerWidth < 600) {
		mobile = true;
	}


	// Add event listeners to the buttons
	newChallengeButton.addEventListener('click', async () => {
		await getNewChallenge();
	});

	function drawGame() {
		// Get the canvas context
		const ctx = canvas.getContext('2d');
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		// Draw the starting vector
		const startingVector = new CanvasVector(ctx, (canvas.width / 2) - (currentStartingVector[0] * 10), (canvas.height / 2) - (currentStartingVector[1] * 10), (canvas.width / 2) + (currentStartingVector[0] * 10), (canvas.height / 2) + (currentStartingVector[1] * 10), 'red');
		startingVector.draw(ctx);
		// Draw the projection vector
		const projectionVector = new CanvasVector(ctx, (canvas.width / 2) - (currentStartingVector[0] * 10), (canvas.height / 2) - (currentStartingVector[1] * 10), (canvas.width / 2) + (currentProjectionVector[0] * 10), (canvas.height / 2) + (currentProjectionVector[1] * 10), 'green');
		projectionVector.draw(ctx);
		// Draw the draggable vector (on top of the current projection vector)
		const draggableVector = new DraggableCanvasVector(ctx, (canvas.width / 2) - (currentStartingVector[0] * 10), (canvas.height / 2) - (currentStartingVector[1] * 10), (canvas.width / 2) + (currentProjectionVector[0] * 10), (canvas.height / 2) + (currentProjectionVector[1] * 10), 'blue');
		draggableVector.draw(ctx);
		draggableVector.addEventListeners(canvas);
	}

	function drawGrid() {
		// -10 - 10x, -10 - 10y grid. Assume everything is cleared and the canvas is 500x500 pixels
		const ctx = canvas.getContext('2d');
		// Draw the minor grid lines with loops and stroke width 1.
		for (let i = 0; i < 21; i++) {
			ctx.beginPath();
			ctx.lineWidth = 1;
			ctx.strokeStyle = '#e0e0e0';
			ctx.moveTo(0, 25 * i);
			ctx.lineTo(500, 25 * i);
			ctx.stroke();
			ctx.moveTo(25 * i, 0);
			ctx.lineTo(25 * i, 500);
			ctx.stroke();
			ctx.closePath();
		}
		ctx.beginPath();
		ctx.strokeStyle = 'black';
		ctx.stroke();
		// Draw the x axis
		ctx.moveTo(0, 250);
		ctx.lineWidth = 2;
		ctx.lineTo(500, 250);
		ctx.stroke();
		// Draw the y axis
		ctx.moveTo(250, 0);
		ctx.lineWidth = 2;
		ctx.lineTo(250, 500);
		ctx.stroke();
		ctx.lineWidth = 1;
		// Stop path
		ctx.closePath();
		ctx.lineWidth = 2;
	}

	class Game {
		constructor(data, ctx) {
			this.data = data;
			this.ctx = ctx;
			this.startingVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.startingVector[0] * 25), canvas.height / 2 + (data.startingVector[1] * 25), 'red');
			this.projectionVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.projectionVector[0] * 25), canvas.height / 2 + (data.projectionVector[1] * 25), 'blue');
			// Green draggable vector pointing somewhere random on the canvas
			this.draggableVector = new DraggableCanvasVector(ctx, canvas.width / 2, canvas.height / 2, Math.random() * canvas.width, Math.random() * canvas.height, 'green');
			this.startingVector.draw();
			this.projectionVector.draw();
			this.draggableVector.draw();
			this.draggableVector.addEventListeners(canvas);
			// Every frame, redraw the game
			this.drawLoop = setInterval(() => {
				this.draw();
			});
		}

		// Redraws the game
		draw() {
			// Clear the canvas
			this.ctx.clearRect(0, 0, canvas.width, canvas.height);
			// Draw the grid
			drawGrid();
			this.startingVector.draw();
			this.projectionVector.draw();
			this.draggableVector.draw();
		}

		stop() {
			clearInterval(this.drawLoop);
		}
	}

	// When mobile, accept clicks on the canvas to drag the vector
	canvas.addEventListener('click', (e) => {
		if (mobile) {
			// Get current position of canvas on screen (not page)
            const rect = canvas.getBoundingClientRect();
            // Get the x and y coordinates of the click relative to the canvas
            const x = e.clientX - rect.left;
						            const y = e.clientY - rect.top;
												console.log("mobile click at " + x + ", " + y);
			if (currentGame) {
				currentGame.draggableVector.dragging = true;
				currentGame.draggableVector.x2 = x;
				currentGame.draggableVector.y2 = y;
			}
		}
	})


	// Add mobile event listeners (toggle mobile variable)
	let mobileButton = document.getElementById('mobile-mode');
	mobileButton.addEventListener('click', () => {
		mobile = !mobile;
		if (mobile) {
			mobileButton.innerHTML = "I'm using a mouse/trackpad";
		} else {
			mobileButton.innerHTML = "I'm using a touch screen";
		}
	});

	// Submit the answer
	submitButton.addEventListener('click', async () => {
		// Get the answer
		const answer = [(currentGame.draggableVector.x2 - 250) / 25, (currentGame.draggableVector.y2 - 250) / 25];
		// Send the answer to the server
		const response = await fetch('/api/submit', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				vector: answer
			})
		});
		// Get the response
		const data = await response.json();
		// If the answer is correct
		if (data.status !== 200) {
			// Error
			document.getElementById('error').innerText = data.message;
		} else {
			// Correct: edit HTML with new scores and re-render solution (not with game, though)
			document.getElementById('score').innerText = Math.round(data.score * 100) / 100 + ' points';
			document.getElementById('score-x').innerText = Math.round(data.scores[0] * 100) / 100 + ' points';
			document.getElementById('score-y').innerText = Math.round(data.scores[1] * 100) / 100 + ' points';

			// Stop the game
			currentGame.stop();
			// Clear the canvas
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			// Draw the grid
			drawGrid();
			// Draw the starting vector
			const startingVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.startingVector[0] * 25), canvas.height / 2 + (data.startingVector[1] * 25), 'red');
			startingVector.draw(ctx);
			// Draw the projection vector
			const projectionVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.projectionVector[0] * 25), canvas.height / 2 + (data.projectionVector[1] * 25), 'blue');
			projectionVector.draw(ctx);
			// Draw the submitted vector
			const submittedVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.submittedVector[0] * 25), canvas.height / 2 + (data.submittedVector[1] * 25), 'green');
			submittedVector.draw(ctx);
			// Draw the answer vector
			const solvedVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.solvedVector[0] * 25), canvas.height / 2 + (data.solvedVector[1] * 25), 'purple');
			solvedVector.draw(ctx);
		}
	});

	getNewChallenge();
</script>
</body>
</html>