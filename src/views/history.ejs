<html>
<!-- Include head, pass meta object through -->
<%- include('partials/head', { meta: {
title: "Play",
description: "Project a vector, earn points, and beat others!"
} }) %>
<body class="bg-gray-100">
<div class="absolute inset-0 bg-[url(/svg/grid.svg)] bg-center w-full h-full -z-10"></div>
<div class="relative z-10">
    <div class="container mx-auto min-h-screen flex flex-col items-center justify-center">
        <div class="p-6 rounded-lg shadow-md bg-white max-w-4xl mt-6 mb-6">
            <h1 class="text-4xl font-bold mb-4">History for game <%- history._id %></h1>
            <p class="text-gray-600 mb-4" id="history-username"></p>
            <canvas id="main" class="m-auto align-center justify-center" width="500px" height="500px"></canvas>
            <p class="text-red-500 text-sm mb-4" id="error"></p>
            <div class="flex justify-center mt-4">
                <div id="scores">
                    <div id="scores-table">
                        <table class="table-auto border-collapse border border-gray-400">
                            <tr class="border border-gray-400">
                                <th class="border border-gray-400 px-4 py-2">Type</th>
                                <th class="border border-gray-400 px-4 py-2">Score</th>
                            </tr>
                            <tr class="border border-gray-400">
                                <td class="border border-gray-400 px-4 py-2">Total score</td>
                                <td class="border border-gray-400 px-4 py-2" id="score"></td>
                            </tr>
                            <tr class="border border-gray-400">
                                <td class="border border-gray-400 px-4 py-2">X score</td>
                                <td class="border border-gray-400 px-4 py-2" id="score-x"></td>
                            </tr>
                            <tr class="border border-gray-400">
                                <td class="border border-gray-400 px-4 py-2">Y score</td>
                                <td class="border border-gray-400 px-4 py-2" id="score-y"></td>
                            </tr>
                        </table>
                        <!-- Small caption centered underneath table, saying "Using legacy scoring system" -->
                        <p class="text-gray-600 text-sm text-center mt-2">Using legacy scoring system</p>
                    </div>
                    <div class="hidden" id="scores-div">
                        <div class="w-full">
                            <div class="bg-gray-200 rounded-full h-4 mb-2">
                                <div id="general-score-bar" class="bg-blue-500 rounded-full h-4" style="width: 0%">
                                    &nbsp;
                                </div>
                            </div>
                            <p class="text-center text-sm text-gray-600">Total Score: <span id="general-score"
                                                                                            class="font-bold">0</span>
                            </p>
                        </div>
                        <div class="flex flex-col md:flex-row gap-2">
                            <div class="w-1/2">
                                <div class="bg-gray-200 rounded-full h-4 mb-2">
                                    <div id="cosine-score-bar" class="bg-blue-500 rounded-full h-4" style="width: 0%">
                                        &nbsp;
                                    </div>
                                </div>
                                <p class="text-center text-sm text-gray-600">Cosine Similarity: <span id="cosine-score"
                                                                                                      class="font-bold">0</span>
                                </p>
                            </div>
                            <div class="w-1/2">
                                <div class="bg-gray-200 rounded-full h-4 mb-2">
                                    <div id="euclidean-score-bar" class="bg-blue-500 rounded-full h-4"
                                         style="width: 0%">&nbsp;
                                    </div>
                                </div>
                                <p class="text-center text-sm text-gray-600">Magnitude Score: <span id="euclidean-score"
                                                                                                    class="font-bold">0</span>
                            </div>
                            <div class="w-1/2">
                                <div class="bg-gray-200 rounded-full h-4 mb-2">
                                    <div id="chebyshev-score-bar" class="bg-blue-500 rounded-full h-4"
                                         style="width: 0%">&nbsp;
                                    </div>
                                </div>
                                <p class="text-center text-sm text-gray-600">Chebyshev Distance: <span
                                            id="chebyshev-score"
                                            class="font-bold">0</span>
                            </div>
                        </div>
                        <!-- Small caption centered underneath table, saying "Using new scoring system" -->
                        <p class="text-gray-600 text-sm text-center mt-2">Using new scoring system</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
	let historyId = "<%= history._id %>";
	let ctx = document.getElementById("main").getContext("2d");

	function clearCanvas() {
		const canvas = document.getElementById("main");
		const ctx = canvas.getContext("2d");
		ctx.clearRect(0, 0, canvas.width, canvas.height);
	}

	class CanvasVector {
		constructor(ctx, x1, y1, x2, y2, color) {
			this.x1 = x1;
			this.y1 = y1;
			this.x2 = x2;
			this.y2 = y2;
			this.color = color;
			this.ctx = ctx;
		}

		draw() {
			this.ctx.lineCap = 'round';
			const headlen = 10; // length of head in pixels
			const dx = this.x2 - this.x1;
			const dy = this.y2 - this.y1;
			const angle = Math.atan2(dy, dx);
			this.ctx.beginPath();
			this.ctx.moveTo(this.x1, this.y1);
			this.ctx.lineTo(this.x2, this.y2);
			this.ctx.lineTo(this.x2 - headlen * Math.cos(angle - Math.PI / 6), this.y2 - headlen * Math.sin(angle - Math.PI / 6));
			this.ctx.moveTo(this.x2, this.y2);
			this.ctx.lineTo(this.x2 - headlen * Math.cos(angle + Math.PI / 6), this.y2 - headlen * Math.sin(angle + Math.PI / 6));
			this.ctx.strokeStyle = this.color;
			this.ctx.stroke();
			this.ctx.closePath();
		}

		// Returns the length of the vector
		getLength() {
			return Math.sqrt(Math.pow(this.x2 - this.x1, 2) + Math.pow(this.y2 - this.y1, 2));
		}

		// Returns the angle of the vector in radians
		getAngle() {
			return Math.atan2(this.y2 - this.y1, this.x2 - this.x1);
		}
	}

	// Get the canvas element
	const canvas = document.getElementById('main');

	function drawGrid() {
		// -10 - 10x, -10 - 10y grid. Assume everything is cleared and the canvas is 500x500 pixels
		const ctx = canvas.getContext('2d');
		// Draw the minor grid lines with loops and stroke width 1.
		for (let i = 0; i < 21; i++) {
			ctx.beginPath();
			ctx.lineWidth = 1;
			ctx.strokeStyle = '#e0e0e0';
			ctx.moveTo(0, 25 * i);
			ctx.lineTo(500, 25 * i);
			ctx.stroke();
			ctx.moveTo(25 * i, 0);
			ctx.lineTo(25 * i, 500);
			ctx.stroke();
			ctx.closePath();
		}
		ctx.beginPath();
		ctx.strokeStyle = 'black';
		ctx.stroke();
		// Draw the x axis
		ctx.moveTo(0, 250);
		ctx.lineWidth = 2;
		ctx.lineTo(500, 250);
		ctx.stroke();
		// Draw the y axis
		ctx.moveTo(250, 0);
		ctx.lineWidth = 2;
		ctx.lineTo(250, 500);
		ctx.stroke();
		ctx.lineWidth = 1;
		// Stop path
		ctx.closePath();
		ctx.lineWidth = 2;
	}

	(async () => {
		// Get the answer
		const response = await fetch('/api/history?id=' + historyId);
		// Get the response
		const data = await response.json();
		// If the answer is correct
		if (data.status !== 200) {
			// Error
			document.getElementById('error').innerText = data.message;
		} else {
			// If data.scores length = 2 we can assume we are using legacy scoring
			if (data.scores.length === 2) {
				document.getElementById('score').innerText = Math.round(data.score * 100) / 100 + ' points';
				document.getElementById('score-x').innerText = Math.round(data.scores[0] * 100) / 100 + ' points';
				document.getElementById('score-y').innerText = Math.round(data.scores[1] * 100) / 100 + ' points';
			} else {
				// Use new scoring system
				// Correct: edit HTML with new scores and re-render solution (not with game, though)
				// Hide the old score
				document.getElementById('scores-table').classList.add('hidden');
				// Show the new scores
				document.getElementById('scores-div').classList.remove('hidden');
				document.getElementById('general-score').innerText = Math.round(data.score * 100) / 100 + ' points';
				document.getElementById('cosine-score').innerText = Math.round(data.scores[0] * 100) / 100 + ' points';
				document.getElementById('euclidean-score').innerText = Math.round(data.scores[1] * 100) / 100 + ' points';
				document.getElementById('chebyshev-score').innerText = Math.round(data.scores[2] * 100) / 100 + ' points';

				document.getElementById('general-score-bar').style.width = (data.score < 0 ? 0 : data.score) + '%';
				document.getElementById('cosine-score-bar').style.width = (data.scores[0] < 0 ? 0 : data.scores[0]) + '%';
				document.getElementById('euclidean-score-bar').style.width = (data.scores[1] < 0 ? 0 : data.scores[1]) + '%';
				document.getElementById('chebyshev-score-bar').style.width = (data.scores[2] < 0 ? 0 : data.scores[2]) + '%';
			}

			// Write history username from data.user
			document.getElementById('history-username').innerText = "Played by " + data.user;

			// Stop the game
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			// Draw the grid
			drawGrid();
			// Draw the starting vector
			const startingVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.startingVector[0] * 25), canvas.height / 2 + (data.startingVector[1] * 25), 'red');
			startingVector.draw(ctx);
			// Draw the projection vector
			const projectionVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.projectionVector[0] * 25), canvas.height / 2 + (data.projectionVector[1] * 25), 'blue');
			projectionVector.draw(ctx);
			// Draw the submitted vector
			const submittedVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.submittedVector[0] * 25), canvas.height / 2 + (data.submittedVector[1] * 25), 'green');
			submittedVector.draw(ctx);
			// Draw the answer vector
			const solvedVector = new CanvasVector(ctx, canvas.width / 2, canvas.height / 2, canvas.width / 2 + (data.solvedVector[0] * 25), canvas.height / 2 + (data.solvedVector[1] * 25), 'purple');
			solvedVector.draw(ctx);
		}
	})();
</script>
</body>
</html>